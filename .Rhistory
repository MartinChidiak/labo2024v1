select_language()
install.packages("swirl", dependencies = TRUE)
install.packages("httr", dependencies = TRUE)
library("swirl")
select_language()
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors,6)
head(flag_colors)
lapply(flag_colors,sum)
sapply(flag_colors,sum)
sapply(flag_colors,mean)
flag_shapes <- flags[,19:23]
lapply(flag_shapes,range)
sapply(flag_shapes,range)
shape_mat <- sapply(flag_shapes,range)
shape_mat
class(shape_mat)
unique((c(3,4,5,5,5,6,6)))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
select_language()
swirl()
data(cars)
View(cars)
?cars
head(cars)
plot(cars$speed,cars$dist)
plot(cars)
?plot()
?plot
plot(x = cars$speed,y = cars$dist)
plot(y = cars$speed,x = cars$dist)
plot(x = cars$speed as Speed,y = cars$dist)
plot(x = cars$speed,y = cars$dist,xlab = "Speed")
plot(x = cars$speed,y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed,y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(cars,main = "My Plot")
?plot
plot(cars,sub = "My Plot Subtitle")
?par
plot(cars,col = 2)
plot(cars,xlim = c(10,15))
?points
plot(cars,pch = 2)
load(mtcars)
mtcars
data(mtcars)
play()
head(mtcars)
?boxplot
next()
nxt()
?boxplot
boxplot(mpg ~cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
library("swirl")
swirl()
?par
par()
par_orig <- par()
par("col")
par(col = "Blue")
par(col = "blue")
data(iris)
plot(iris)
par("col")
plot(iris,col = iris$Species)
colnames(iris)
ok()
OK()
names(iris)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
par(pch = 15)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch= "A")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(1:26,pch=0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch= 21, bg = "blue")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, cex = 2)
legend(x = 4.5, y = 7, legend = levels(iris$Species),col = c(1:3), pch = 16)
par(par_orig)
colors()
?grep
grep("yellow",colors(),value = TRUE)
length(colors())
palette()
plot(1:8, col = 1:9, main = "Colores por indice", pch = 17, cex = 3)
plot(1:8, col = 1:9, main = "Colores por índice", pch = 17, cex = 3)
plot(1:8, col = 1:8, main = "Colores por índice", pch = 17, cex = 3)
plot(1:12, col=1:12, main="Colores reciclados", pch=18, cex=3)
plaeta_arcoiris <- rainbow(10)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette()
plot(1:10, main = "Paleta Arcoiris", pch = 17, cex = 3)
plot(1:10,col = 1:10, main = "Paleta Arcoiris", pch = 17, cex = 3)
paleta_calida <- heat.colors(10)
palette(heat.colors)
palette(paleta_calida)
plot(1:10,col = 1:10, main = "Paleta Cálida", pch = 17, cex = 3)
mi_paleta <- c("red","green","#0019ffff")
mi_paleta <- c("red","green","#0019FFFF")
plot(1:10, col = mi_paleta, main = "Mi Paleta", pch = 17, cex = 3)
palette(mi_paleta)
plot(1:10, col = 1:10, main = "Mi Paleta", pch = 17, cex =3)
palette("default")
plot(1:20, type="n")
text(5,5,"¡Hola Mundo!")
?text
text(11,11,"¡Hola Mundo! x2", cex = 2)
text(7,7,"¡Hola Mundo con Serif!", family = "serif")
text(9,9,"¡Hola Mundo con Mono!", family = "Mono")
text(9,9,"¡Hola Mundo con Mono!", family = "mono")
text(13,13,"¡Hola Mundo con Sans!", family = "sans")
demo(plotmath)
plot(1:10, type = "n", main =  expression(alpha + beta))
plot(1:10, type="n", xlab =expression(paste("Valores de ", x^phi1)))
?plotmath
t <- 10
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x), list(x=t)))
t <- 20
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x), list(x=t)))
?substitute
data(iris)
head(iris)
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
?rgl
open3d()
plot3d(iris$Sepal.Length,iris$Petal.Length,iris$Sepal.Width)
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s")
Ingresa plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=as.integer(iris$Species))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s",col=as.integer(iris$Species), radius=1.5)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
asd <-plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
asd
?plot3d
texto <- "¡Hola Mundo!"
texto[1]
texto[2]
?substring
substring(texto,6,11)
substring(texto,7,11)
substring(texto, 7, 11) <- "Swirl"
texto
nchar(texto)
paste("¡Adiós", "Mundo!")
paste("¡Adiós", "Mundo!",sep = "_")
i <- 9
sprintf("El cuadrado de %d es %d", i, i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o", "a", "¡Hola Mundo!")
patron <- "H(a|ä|ae)ndel"
musicos
grep(patron, musicos)
nuevo_patron <- ".(a|ä|ae|e)ndel"
grep(nuevo_patron, musicos)
regexpr(patron, musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
?regexpr
data(diamonds)
force(diamonds)
force(diamonds)
View(diamonds)
?qplot
qplot(color, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price,data=diamonds, color=color)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, size=table)
qplot(carat, price, data=diamonds, facets = color ~ .)
qplot(carat, price, data=diamonds, geom = c("point", "smooth"))
plot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "boxplot")
?normal
?Normal
help(Distributions)
?rbinom
rbinom(1, 7, 0.5)
resultado <- rbinom(100, 7, 0.5)
resultado <- rbinom(100000, 7, 0.5)
tail(resultado)
tail(resultado > 5)
mean(resultado>5)
?set.seed
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\\labo2024v1") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("c:\\OneDrive\\labo2024v1\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd(""C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\"") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\") # Establezco el Working Directory
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100069, 101531, 401507, 700001, 900001,300089, 320057, 320027, 320009, 320039,100057, 100207, 100237, 100267 , 100297,101599, 388177, 254747, 379289, 154027)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 117000, -3000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("C:/Users/Martin/OneDrive/Maestría/8-LaboratoriodeImplementacion1/labo2024v1") # Establezco el Working Directory
# cargo los datos
# cargo los datos
dataset <- fread("./datasets/dataset_pequeno.csv")
# trabajo solo con los datos con clase, es decir 202107
dataset <- dataset[clase_ternaria != ""]
param_basicos <- list(
"cp" = -1, # complejidad minima
"minsplit" = 900, # minima cant de registros en un nodo para hacer el split
"minbucket" = 440, # minima cantidad de registros en una hoja
"maxdepth" = 5
) # profundidad máxima del arbol
# Un solo llamado, con la semilla 17
ArbolEstimarGanancia(17, param_basicos)
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
salidas <- mcmapply(ArbolEstimarGanancia,
PARAM$semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 1  # en Windows este valor debe ser 1
)
# muestro la lista de las salidas en testing
#  para la particion realizada con cada semilla
salidas
# paso la lista a vector
tb_salida <- rbindlist(salidas)
tb_salida
# finalmente calculo la media (promedio)  de las ganancias
tb_salida[, mean(ganancia_test)]
# calculo todos los promedios
tb_salida[, lapply(.SD, mean)]
# desvio estandar Distribucion Binomial   sqrt( n * p * (1-p) )
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100069, 101531, 401507, 700001, 900001)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 117000, -3000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("C:/Users/Martin/OneDrive/Maestría/8-LaboratoriodeImplementacion1/labo2024v1") # Establezco el Working Directory
# cargo los datos
# cargo los datos
dataset <- fread("./datasets/dataset_pequeno.csv")
# trabajo solo con los datos con clase, es decir 202107
dataset <- dataset[clase_ternaria != ""]
param_basicos <- list(
"cp" = -1, # complejidad minima
"minsplit" = 900, # minima cant de registros en un nodo para hacer el split
"minbucket" = 440, # minima cantidad de registros en una hoja
"maxdepth" = 5
) # profundidad máxima del arbol
# Un solo llamado, con la semilla 17
ArbolEstimarGanancia(17, param_basicos)
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
salidas <- mcmapply(ArbolEstimarGanancia,
PARAM$semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 5  # en Windows este valor debe ser 1
)
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("rpart")
require("parallel")
PARAM <- list()
# reemplazar por las propias semillas
PARAM$semillas <- c(100069, 101531, 401507, 700001, 900001)
#------------------------------------------------------------------------------
# particionar agrega una columna llamada fold a un dataset que consiste
#  en una particion estratificada segun agrupa
# particionar( data=dataset, division=c(70,30), agrupa=clase_ternaria, seed=semilla)
#  crea una particion 70, 30
particionar <- function(data, division, agrupa = "", campo = "fold", start = 1, seed = NA) {
if (!is.na(seed)) set.seed(seed)
bloque <- unlist(mapply(function(x, y) {
rep(y, x)
}, division, seq(from = start, length.out = length(division))))
data[, (campo) := sample(rep(bloque, ceiling(.N / length(bloque))))[1:.N],
by = agrupa
]
}
#------------------------------------------------------------------------------
ArbolEstimarGanancia <- function(semilla, param_basicos) {
# particiono estratificadamente el dataset
particionar(dataset, division = c(7, 3), agrupa = "clase_ternaria", seed = semilla)
# genero el modelo
# predecir clase_ternaria a partir del resto
modelo <- rpart("clase_ternaria ~ .",
data = dataset[fold == 1], # fold==1  es training,  el 70% de los datos
xval = 0,
control = param_basicos
) # aqui van los parametros del arbol
# aplico el modelo a los datos de testing
prediccion <- predict(modelo, # el modelo que genere recien
dataset[fold == 2], # fold==2  es testing, el 30% de los datos
type = "prob"
) # type= "prob"  es que devuelva la probabilidad
# prediccion es una matriz con TRES columnas,
#  llamadas "BAJA+1", "BAJA+2"  y "CONTINUA"
# cada columna es el vector de probabilidades
# calculo la ganancia en testing  qu es fold==2
ganancia_test <- dataset[
fold == 2,
sum(ifelse(prediccion[, "BAJA+2"] > 0.025,
ifelse(clase_ternaria == "BAJA+2", 117000, -3000),
0
))
]
# escalo la ganancia como si fuera todo el dataset
ganancia_test_normalizada <- ganancia_test / 0.3
return(list(
"testing" = dataset[fold == 2, .N],
"testing_pos" = dataset[fold == 2 & clase_ternaria == "BAJA+2", .N],
"envios" = dataset[fold == 2, sum(prediccion[, "BAJA+2"] > 0.025)],
"aciertos" = dataset[
fold == 2,
sum(prediccion[, "BAJA+2"] > 0.025 & clase_ternaria == "BAJA+2")
],
"ganancia_test" = ganancia_test_normalizada
))
}
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
# Aqui se debe poner la carpeta de la computadora local
setwd("C:/Users/Martin/OneDrive/Maestría/8-LaboratoriodeImplementacion1/labo2024v1") # Establezco el Working Directory
# cargo los datos
# cargo los datos
dataset <- fread("./datasets/dataset_pequeno.csv")
# trabajo solo con los datos con clase, es decir 202107
dataset <- dataset[clase_ternaria != ""]
param_basicos <- list(
"cp" = -1, # complejidad minima
"minsplit" = 900, # minima cant de registros en un nodo para hacer el split
"minbucket" = 440, # minima cantidad de registros en una hoja
"maxdepth" = 5
) # profundidad máxima del arbol
# Un solo llamado, con la semilla 17
ArbolEstimarGanancia(17, param_basicos)
# la funcion mcmapply  llama a la funcion ArbolEstimarGanancia
#  tantas veces como valores tenga el vector  PARAM$semillas
salidas <- mcmapply(ArbolEstimarGanancia,
PARAM$semillas, # paso el vector de semillas
MoreArgs = list(param_basicos), # aqui paso el segundo parametro
SIMPLIFY = FALSE,
mc.cores = 1  # en Windows este valor debe ser 1
)
# muestro la lista de las salidas en testing
#  para la particion realizada con cada semilla
salidas
# paso la lista a vector
tb_salida <- rbindlist(salidas)
tb_salida
# finalmente calculo la media (promedio)  de las ganancias
tb_salida[, mean(ganancia_test)]
# calculo todos los promedios
tb_salida[, lapply(.SD, mean)]
# desvio estandar Distribucion Binomial   sqrt( n * p * (1-p) )
