shape_mat
class(shape_mat)
unique((c(3,4,5,5,5,6,6)))
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
lapply(unique_vals,length)
sapply(unique_vals,length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
select_language()
swirl()
data(cars)
View(cars)
?cars
head(cars)
plot(cars$speed,cars$dist)
plot(cars)
?plot()
?plot
plot(x = cars$speed,y = cars$dist)
plot(y = cars$speed,x = cars$dist)
plot(x = cars$speed as Speed,y = cars$dist)
plot(x = cars$speed,y = cars$dist,xlab = "Speed")
plot(x = cars$speed,y = cars$dist,ylab = "Stopping Distance")
plot(x = cars$speed,y = cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(cars,main = "My Plot")
?plot
plot(cars,sub = "My Plot Subtitle")
?par
plot(cars,col = 2)
plot(cars,xlim = c(10,15))
?points
plot(cars,pch = 2)
load(mtcars)
mtcars
data(mtcars)
play()
head(mtcars)
?boxplot
next()
nxt()
?boxplot
boxplot(mpg ~cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
library("swirl")
swirl()
?par
par()
par_orig <- par()
par("col")
par(col = "Blue")
par(col = "blue")
data(iris)
plot(iris)
par("col")
plot(iris,col = iris$Species)
colnames(iris)
ok()
OK()
names(iris)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
par(pch = 15)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch= "A")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)
plot(1:26,pch=0:25)
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, pch= 21, bg = "blue")
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species, cex = 2)
legend(x = 4.5, y = 7, legend = levels(iris$Species),col = c(1:3), pch = 16)
par(par_orig)
colors()
?grep
grep("yellow",colors(),value = TRUE)
length(colors())
palette()
plot(1:8, col = 1:9, main = "Colores por indice", pch = 17, cex = 3)
plot(1:8, col = 1:9, main = "Colores por índice", pch = 17, cex = 3)
plot(1:8, col = 1:8, main = "Colores por índice", pch = 17, cex = 3)
plot(1:12, col=1:12, main="Colores reciclados", pch=18, cex=3)
plaeta_arcoiris <- rainbow(10)
paleta_arcoiris <- rainbow(10)
paleta_arcoiris
palette(paleta_arcoiris)
palette()
plot(1:10, main = "Paleta Arcoiris", pch = 17, cex = 3)
plot(1:10,col = 1:10, main = "Paleta Arcoiris", pch = 17, cex = 3)
paleta_calida <- heat.colors(10)
palette(heat.colors)
palette(paleta_calida)
plot(1:10,col = 1:10, main = "Paleta Cálida", pch = 17, cex = 3)
mi_paleta <- c("red","green","#0019ffff")
mi_paleta <- c("red","green","#0019FFFF")
plot(1:10, col = mi_paleta, main = "Mi Paleta", pch = 17, cex = 3)
palette(mi_paleta)
plot(1:10, col = 1:10, main = "Mi Paleta", pch = 17, cex =3)
palette("default")
plot(1:20, type="n")
text(5,5,"¡Hola Mundo!")
?text
text(11,11,"¡Hola Mundo! x2", cex = 2)
text(7,7,"¡Hola Mundo con Serif!", family = "serif")
text(9,9,"¡Hola Mundo con Mono!", family = "Mono")
text(9,9,"¡Hola Mundo con Mono!", family = "mono")
text(13,13,"¡Hola Mundo con Sans!", family = "sans")
demo(plotmath)
plot(1:10, type = "n", main =  expression(alpha + beta))
plot(1:10, type="n", xlab =expression(paste("Valores de ", x^phi1)))
?plotmath
t <- 10
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x), list(x=t)))
t <- 20
plot(1:t, main = substitute(paste("La gráfica del vector 1:", x), list(x=t)))
?substitute
data(iris)
head(iris)
x <- iris$Sepal.Length
y <- iris$Petal.Length
z <- iris$Sepal.Width
?rgl
open3d()
plot3d(iris$Sepal.Length,iris$Petal.Length,iris$Sepal.Width)
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s")
Ingresa plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=rainbow(150))
plot3d(iris$Sepal.Length, iris$Petal.Length,iris$Sepal.Width, type="s", col=as.integer(iris$Species))
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="s",col=as.integer(iris$Species), radius=1.5)
plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
asd <-plot3d(iris$Sepal.Length, iris$Petal.Length, iris$Sepal.Width, type="l", col=as.integer(iris$Species), xlab ="Sepal.Length", ylab = "Petal.Length", zlab = "Sepal.Width")
asd
?plot3d
texto <- "¡Hola Mundo!"
texto[1]
texto[2]
?substring
substring(texto,6,11)
substring(texto,7,11)
substring(texto, 7, 11) <- "Swirl"
texto
nchar(texto)
paste("¡Adiós", "Mundo!")
paste("¡Adiós", "Mundo!",sep = "_")
i <- 9
sprintf("El cuadrado de %d es %d", i, i^2)
?sprintf
strsplit("Me/gusta/programar/en/R", "/")
chartr("o", "a", "¡Hola Mundo!")
patron <- "H(a|ä|ae)ndel"
musicos
grep(patron, musicos)
nuevo_patron <- ".(a|ä|ae|e)ndel"
grep(nuevo_patron, musicos)
regexpr(patron, musicos)
gregexpr(patron, "Georg Friedrich Händel, en inglés George Frideric Handel fue un compositor alemán.")
?regexpr
data(diamonds)
force(diamonds)
force(diamonds)
View(diamonds)
?qplot
qplot(color, data=diamonds)
qplot(carat, price, data=diamonds)
qplot(log(carat), log(price), data=diamonds)
qplot(carat, x*y*z, data=diamonds)
qplot(carat, price,data=diamonds, color=color)
qplot(carat, price, data=diamonds, shape=cut)
qplot(carat, price, data=diamonds, alpha=I(1/10))
qplot(carat, price, data=diamonds, alpha=I(1/100))
qplot(carat, price, data=diamonds, size=table)
qplot(carat, price, data=diamonds, facets = color ~ .)
qplot(carat, price, data=diamonds, geom = c("point", "smooth"))
plot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "jitter")
qplot(color, price/carat, data=diamonds, geom = "boxplot")
?normal
?Normal
help(Distributions)
?rbinom
rbinom(1, 7, 0.5)
resultado <- rbinom(100, 7, 0.5)
resultado <- rbinom(100000, 7, 0.5)
tail(resultado)
tail(resultado > 5)
mean(resultado>5)
?set.seed
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\\labo2024v1") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("c:\\OneDrive\\labo2024v1\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd(""C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\"") # Establezco el Working Directory
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:\Users\Martin\OneDrive\Maestría\8-LaboratoriodeImplementacion1\labo2024v1\\") # Establezco el Working Directory
reticulate::repl_python()
# -*- coding: utf-8 -*-
"""
Created on Thu Sep 10 19:25:11 2020
@author: Martin
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
bg_color = 'black'
fg_color = 'white'
plt.rcParams['axes.titlesize'] = 30
plt.rcParams['axes.labelsize'] = 20
plt.rcParams['font.size'] = 25
plt.rcParams['xtick.labelsize']=20
plt.rcParams['ytick.labelsize']=20
import seaborn as sns
#_____________________________________
# Fijo un punto y una normal
point  = np.array([1, 2, 3])
normal = np.array([1, 1, 2])
# el plano es a*x+b*y+c*z-d=0
# Por definicion del hiperplano → [a,b,c] es normal a los puntos que habitan el plano.
# Tenemos ... para calcular d tenemos que encontrar un punto que habite el plano
# como? con el producto interno del punto elegido
d = point.dot(normal)
# creo una malla de puntos x,y ya que el plano habita en R3
xx, yy = np.meshgrid(range(10), range(10))
# calculo el z
z = (-normal[0] * xx - normal[1] * yy + d) * 1. /normal[2]
#_____________________________________
# Armo el plot
def plot_():
ax=plt.subplot(projection='3d')
ax.yaxis.labelpad=30
ax.zaxis.labelpad=30
ax.xaxis.labelpad=30
ax.set_xlabel('x',linespacing=6.1);
ax.set_ylabel('y',linespacing=6.1)
ax.set_zlabel('z',linespacing=6.1);
return ax
ax=plot_()
# plot la superficie
ax.plot_surface(xx, yy, z, alpha=0.7);
# plot el punto anterior
ax.plot([point[0]], [point[1]], [point[2]], color='red', marker='o', markersize=20, alpha=0.8);
# Dejo el vector normal en el centro del plano
startX = np.mean(ax.get_xlim())
startY = np.mean(ax.get_ylim())
startZ = (-normal[0] * startX - normal[1] * startY +d) * 1 /normal[2]
# Dibujo la normal al plano
ax.quiver([startX], [startY], [startZ], [normal[0]], [normal[1]], [normal[2]], linewidths = (5,), edgecolor="red");
# Dibujo un vector en el plano desde el origen
ax.quiver([0], [0], [0], [startX], [startY], [startZ], linewidths = (5,),arrow_length_ratio=0.1, edgecolor="blue");
#_____________________________________
ax=plot_()
# plot la superficie
ax.plot_surface(xx, yy, z, alpha=0.7);
# simulo 6 vectores en el plano. ax.get_xlim me devuelve el rango que puede valer cada coordenada x,y y z
startX=ax.get_xlim()[0]+(ax.get_xlim()[1]-ax.get_xlim()[0])*np.random.rand(6,1)
startY=ax.get_ylim()[0]+(ax.get_ylim()[1]-ax.get_ylim()[0])*np.random.rand(6,1)
startZ = (-normal[0] * startX - normal[1] * startY + d) * 1 /normal[2]
# grafica 6 normales y 6 vectores en el plano
ax.quiver([startX], [startY], [startZ], [normal[0]], [normal[1]], [normal[2]], linewidths = (1,), edgecolor="red");
ax.quiver([0], [0], [0], [startX], [startY], [startZ], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="blue");
#_____________________________________
# Cuando hablamos de normal al vector , nos referimos al vector que habita en el plano
# Como lo hacemos habitar? → vector diferencia
# plot la superficie
ax=plot_()
ax.plot_surface(xx, yy, z, alpha=0.83);
#v1 y v2 apoyan en el plano, sus extremos descansan en el plano
X0=startX[0][0],startY[0][0],startZ[0][0]
X0=list(X0)
X=startX[1][0],startY[1][0],startZ[1][0]
X=list(X)
# simplemente lo multiplico por la normal
# ecuacion del plano (X0-X)*Normal=0 → X0*N + (-X*Normal)=0 → X0*Normal+Sesgo=0
# el vector dif habita en el plano dif por ser la diferencia de dos vectores del plano
dif=np.array(X0) -np.array(X)
dif.dot(normal)
#grafica un vector que vive "sobre" el plano
ax.quiver([X[0]], [X[1]], [X[2]], [dif[0]], [dif[1]], [dif[2]], linewidths = (14,), arrow_length_ratio=0.01,edgecolor="blue");
# Es diferente los planos que satisfacen el plano de las diferencias entre ellos!
ax.quiver([0], [0], [0], [X[0]], [X[1]], [X[2]], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="red");
ax.quiver([0], [0], [0], [X0[0]], [X0[1]], [X0[2]], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="blue");
#_________________________________________________
ax=plot_()
ax.plot_surface(xx, yy, z, alpha=0.7);
# ecuacion del plano (X0-X)*Normal=0 → X0*N + (-X*Normal)=0 → X0*Normal+Sesgo=0
# el sesgo de un punto sobre el planto da -9
# Dejo el vector normal en el centro del plano
startX = np.mean(ax.get_xlim())
startY = np.mean(ax.get_ylim())
startZ = (-normal[0] * startX - normal[1] * startY +d) * 1 /normal[2]
point=np.array([startX,startY,startZ])
-normal.dot(point)
# plot el punto anterior
ax.plot([point[0]], [point[1]], [point[2]], color='red', marker='o', markersize=20, alpha=0.8);
# si lo alejo del plano sumandole un valor arbitrario, obtengo...-18
-normal.dot(point+[1,2,3])
arriba=point+[1,2,3]
startX_, startY_, startZ_=arriba
ax.plot([arriba[0]], [arriba[1]], [arriba[2]], color='red', marker='*', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [startX_], [startY_], [startZ_], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="blue");
abajo=point-[0.9,1.8,1.3]
startX_, startY_, startZ_=abajo
ax.plot([abajo[0]], [abajo[1]], [abajo[2]], color='magenta', marker='s', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [startX_], [startY_], [startZ_], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="red");
#_____________________________________
#Como genero un plano a partir de 2 vectores
# producto vectorial o cruz de 2 vectores
a=[1,2,3]
b=[3,-1,5]
normal_=np.cross(a,b)
print(normal_.dot(a))
# creo una malla de puntos x,y
xx_, yy_ = np.meshgrid(range(-5,10), range(-5,10))
# calculo el z
z_ = (-normal_[0] * xx_ - normal_[1] * yy_ + 0) * 1. /normal_[2]
# setup plot
ax = plt.figure(figsize=(10,10))
ax=plt.subplot(projection='3d')
ax.set_xlabel('x');
ax.set_ylabel('y');
ax.set_zlabel('z');
# plot the surface
ax.plot_surface(xx_, yy_, z_, alpha=0.7);
ax.plot([0], [0], [0], color='magenta', marker='s', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [a[0]], [a[1]], [a[2]], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="blue");
ax.quiver([0], [0], [0], [b[0]], [b[1]], [b[2]], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="red");
coding: utf-8 -*-
"""
Created on Thu Sep 10 19:25:11 2020
@author: Martin
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
bg_color = 'black'
fg_color = 'white'
plt.rcParams['axes.titlesize'] = 30
plt.rcParams['axes.labelsize'] = 20
plt.rcParams['font.size'] = 25
plt.rcParams['xtick.labelsize']=20
plt.rcParams['ytick.labelsize']=20
import seaborn as sns
#_____________________________________
# Fijo un punto y una normal
point  = np.array([1, 2, 3])
normal = np.array([1, 1, 2])
# el plano es a*x+b*y+c*z-d=0
# Por definicion del hiperplano → [a,b,c] es normal a los puntos que habitan el plano.
# Tenemos ... para calcular d tenemos que encontrar un punto que habite el plano
# como? con el producto interno del punto elegido
d = point.dot(normal)
# creo una malla de puntos x,y ya que el plano habita en R3
xx, yy = np.meshgrid(range(10), range(10))
# calculo el z
z = (-normal[0] * xx - normal[1] * yy + d) * 1. /normal[2]
#_____________________________________
# Armo el plot
def plot_():
ax=plt.subplot(projection='3d')
ax.yaxis.labelpad=30
ax.zaxis.labelpad=30
ax.xaxis.labelpad=30
ax.set_xlabel('x',linespacing=6.1);
ax.set_ylabel('y',linespacing=6.1)
ax.set_zlabel('z',linespacing=6.1);
return ax
ax=plot_()
# plot la superficie
ax.plot_surface(xx, yy, z, alpha=0.7);
# plot el punto anterior
ax.plot([point[0]], [point[1]], [point[2]], color='red', marker='o', markersize=20, alpha=0.8);
# Dejo el vector normal en el centro del plano
startX = np.mean(ax.get_xlim())
startY = np.mean(ax.get_ylim())
startZ = (-normal[0] * startX - normal[1] * startY +d) * 1 /normal[2]
# Dibujo la normal al plano
ax.quiver([startX], [startY], [startZ], [normal[0]], [normal[1]], [normal[2]], linewidths = (5,), edgecolor="red");
# Dibujo un vector en el plano desde el origen
ax.quiver([0], [0], [0], [startX], [startY], [startZ], linewidths = (5,),arrow_length_ratio=0.1, edgecolor="blue");
#_____________________________________
ax=plot_()
# plot la superficie
ax.plot_surface(xx, yy, z, alpha=0.7);
# simulo 6 vectores en el plano. ax.get_xlim me devuelve el rango que puede valer cada coordenada x,y y z
startX=ax.get_xlim()[0]+(ax.get_xlim()[1]-ax.get_xlim()[0])*np.random.rand(6,1)
startY=ax.get_ylim()[0]+(ax.get_ylim()[1]-ax.get_ylim()[0])*np.random.rand(6,1)
startZ = (-normal[0] * startX - normal[1] * startY + d) * 1 /normal[2]
# grafica 6 normales y 6 vectores en el plano
ax.quiver([startX], [startY], [startZ], [normal[0]], [normal[1]], [normal[2]], linewidths = (1,), edgecolor="red");
ax.quiver([0], [0], [0], [startX], [startY], [startZ], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="blue");
#_____________________________________
# Cuando hablamos de normal al vector , nos referimos al vector que habita en el plano
# Como lo hacemos habitar? → vector diferencia
# plot la superficie
ax=plot_()
ax.plot_surface(xx, yy, z, alpha=0.83);
#v1 y v2 apoyan en el plano, sus extremos descansan en el plano
X0=startX[0][0],startY[0][0],startZ[0][0]
X0=list(X0)
X=startX[1][0],startY[1][0],startZ[1][0]
X=list(X)
# simplemente lo multiplico por la normal
# ecuacion del plano (X0-X)*Normal=0 → X0*N + (-X*Normal)=0 → X0*Normal+Sesgo=0
# el vector dif habita en el plano dif por ser la diferencia de dos vectores del plano
dif=np.array(X0) -np.array(X)
dif.dot(normal)
#grafica un vector que vive "sobre" el plano
ax.quiver([X[0]], [X[1]], [X[2]], [dif[0]], [dif[1]], [dif[2]], linewidths = (14,), arrow_length_ratio=0.01,edgecolor="blue");
# Es diferente los planos que satisfacen el plano de las diferencias entre ellos!
ax.quiver([0], [0], [0], [X[0]], [X[1]], [X[2]], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="red");
ax.quiver([0], [0], [0], [X0[0]], [X0[1]], [X0[2]], linewidths = (3,), arrow_length_ratio=0.01,edgecolor="blue");
#_________________________________________________
ax=plot_()
ax.plot_surface(xx, yy, z, alpha=0.7);
# ecuacion del plano (X0-X)*Normal=0 → X0*N + (-X*Normal)=0 → X0*Normal+Sesgo=0
# el sesgo de un punto sobre el planto da -9
# Dejo el vector normal en el centro del plano
startX = np.mean(ax.get_xlim())
startY = np.mean(ax.get_ylim())
startZ = (-normal[0] * startX - normal[1] * startY +d) * 1 /normal[2]
point=np.array([startX,startY,startZ])
-normal.dot(point)
# plot el punto anterior
ax.plot([point[0]], [point[1]], [point[2]], color='red', marker='o', markersize=20, alpha=0.8);
# si lo alejo del plano sumandole un valor arbitrario, obtengo...-18
-normal.dot(point+[1,2,3])
arriba=point+[1,2,3]
startX_, startY_, startZ_=arriba
ax.plot([arriba[0]], [arriba[1]], [arriba[2]], color='red', marker='*', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [startX_], [startY_], [startZ_], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="blue");
abajo=point-[0.9,1.8,1.3]
startX_, startY_, startZ_=abajo
ax.plot([abajo[0]], [abajo[1]], [abajo[2]], color='magenta', marker='s', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [startX_], [startY_], [startZ_], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="red");
#_____________________________________
#Como genero un plano a partir de 2 vectores
# producto vectorial o cruz de 2 vectores
a=[1,2,3]
b=[3,-1,5]
normal_=np.cross(a,b)
print(normal_.dot(a))
# creo una malla de puntos x,y
xx_, yy_ = np.meshgrid(range(-5,10), range(-5,10))
# calculo el z
z_ = (-normal_[0] * xx_ - normal_[1] * yy_ + 0) * 1. /normal_[2]
# setup plot
ax = plt.figure(figsize=(10,10))
ax=plt.subplot(projection='3d')
ax.set_xlabel('x');
ax.set_ylabel('y');
ax.set_zlabel('z');
# plot the surface
ax.plot_surface(xx_, yy_, z_, alpha=0.7);
ax.plot([0], [0], [0], color='magenta', marker='s', markersize=20, alpha=0.8);
ax.quiver([0], [0], [0], [a[0]], [a[1]], [a[2]], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="blue");
ax.quiver([0], [0], [0], [b[0]], [b[1]], [b[2]], linewidths = (5,), arrow_length_ratio=0.01,edgecolor="red");
# cargo las librerias que necesito
require("data.table")
require("rpart")
require("rpart.plot")
# Aqui se debe poner la carpeta de la materia de SU computadora local
setwd("C:/Users/Martin/OneDrive/Maestría/8-LaboratoriodeImplementacion1/labo2024v1//") # Establezco el Working Directory
# cargo el dataset
dataset <- fread("./datasets/dataset_pequeno.csv")
dtrain <- dataset[foto_mes == 202107] # defino donde voy a entrenar
dapply <- dataset[foto_mes == 202109] # defino donde voy a aplicar el modelo
# genero el modelo,  aqui se construye el arbol
# quiero predecir clase_ternaria a partir de el resto de las variables
modelo <- rpart(
formula = "clase_ternaria ~ .",
data = dtrain, # los datos donde voy a entrenar
xval = 0,
cp = -0.3, # esto significa no limitar la complejidad de los splits
minsplit = 400, # minima cantidad de registros para que se haga el split
minbucket = 300, # tamaño minimo de una hoja
maxdepth = 6
) # profundidad maxima del arbol
# grafico el arbol
prp(modelo,
extra = 101, digits = -5,
branch = 1, type = 4, varlen = 0, faclen = 0
)
# aplico el modelo a los datos nuevos
prediccion <- predict(
object = modelo,
newdata = dapply,
type = "prob"
)
# agrego a dapply una columna nueva que es la probabilidad de BAJA+2
dapply[, prob_baja2 := prediccion[, "BAJA+2"]]
# solo le envio estimulo a los registros
#  con probabilidad de BAJA+2 mayor  a  1/40
dapply[, Predicted := as.numeric(prob_baja2 > 1 / 40)]
# genero el archivo para Kaggle
# primero creo la carpeta donde va el experimento
dir.create("./exp/")
dir.create("./exp/KA2001")
# solo los campos para Kaggle
fwrite(dapply[, list(numero_de_cliente, Predicted)],
file = "./exp/KA2001/K101_001.csv",
sep = ","
)
